
inro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000642  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000304  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	char i=0;
	DDRA=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC=0x00;
  70:	14 ba       	out	0x14, r1	; 20
	while((PINC&(1<<0))==0);	
  72:	98 9b       	sbis	0x13, 0	; 19
  74:	fe cf       	rjmp	.-4      	; 0x72 <main+0x6>
  76:	90 e0       	ldi	r25, 0x00	; 0
	while (1)
	{
		if((PINC&(1<<0))==(1<<0))// 0000 1000<<0
  78:	98 9b       	sbis	0x13, 0	; 19
  7a:	03 c0       	rjmp	.+6      	; 0x82 <main+0x16>
		{
			
			
			i++;
  7c:	9f 5f       	subi	r25, 0xFF	; 255
		while((PINC&(1<<0))==(1<<0));	
  7e:	98 99       	sbic	0x13, 0	; 19
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
		}
		if(i%3==0)
  82:	8b ea       	ldi	r24, 0xAB	; 171
  84:	98 9f       	mul	r25, r24
  86:	81 2d       	mov	r24, r1
  88:	11 24       	eor	r1, r1
  8a:	86 95       	lsr	r24
  8c:	28 2f       	mov	r18, r24
  8e:	22 0f       	add	r18, r18
  90:	82 0f       	add	r24, r18
  92:	29 2f       	mov	r18, r25
  94:	28 1b       	sub	r18, r24
  96:	19 f4       	brne	.+6      	; 0x9e <main+0x32>
		{
			PORTA=0xff;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	ed cf       	rjmp	.-38     	; 0x78 <main+0xc>
		}
		else if(i%3==1)
  9e:	21 30       	cpi	r18, 0x01	; 1
  a0:	11 f4       	brne	.+4      	; 0xa6 <main+0x3a>
		{
			PORTA=0x00;
  a2:	1b ba       	out	0x1b, r1	; 27
  a4:	e9 cf       	rjmp	.-46     	; 0x78 <main+0xc>
		}
		else 
		{
			PORTA=0x00;
  a6:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	3f e3       	ldi	r19, 0x3F	; 63
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	23 e0       	ldi	r18, 0x03	; 3
  ae:	31 50       	subi	r19, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	20 40       	sbci	r18, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
			_delay_ms(1000);
			PORTA=0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	3f e3       	ldi	r19, 0x3F	; 63
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	23 e0       	ldi	r18, 0x03	; 3
  c4:	31 50       	subi	r19, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	20 40       	sbci	r18, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
  d0:	d3 cf       	rjmp	.-90     	; 0x78 <main+0xc>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
