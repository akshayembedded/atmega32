
adc_temprature.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000304  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000879  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000647  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b1  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000333  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ec  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  7a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <cmd>:
#define F_CPU 8000000UL
#include <util/delay.h>

void cmd(char a)
{
	PORTC&=~(1<<3);
  82:	95 b3       	in	r25, 0x15	; 21
  84:	97 7f       	andi	r25, 0xF7	; 247
  86:	95 bb       	out	0x15, r25	; 21
	PORTD=a;
  88:	82 bb       	out	0x12, r24	; 18
	PORTC|=(1<<4);
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	80 61       	ori	r24, 0x10	; 16
  8e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e6       	ldi	r24, 0x6F	; 111
  92:	97 e1       	ldi	r25, 0x17	; 23
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <cmd+0x18>
  9a:	00 00       	nop
	_delay_ms(3);
	PORTC&=~(1<<4);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret

000000a4 <data>:
}
void data(char a)
{
	PORTC|=(1<<3);
  a4:	95 b3       	in	r25, 0x15	; 21
  a6:	98 60       	ori	r25, 0x08	; 8
  a8:	95 bb       	out	0x15, r25	; 21
	PORTD=a;
  aa:	82 bb       	out	0x12, r24	; 18
	PORTC|=(1<<4);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	8f ec       	ldi	r24, 0xCF	; 207
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <data+0x12>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <data+0x18>
  bc:	00 00       	nop
	_delay_ms(1);
	PORTC&=~(1<<4);
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	08 95       	ret

000000c6 <display>:
	
}
void display(const char *p)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	ec 01       	movw	r28, r24
	while(*p)
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <display+0xe>
	{
		data(*p++);
  ce:	21 96       	adiw	r28, 0x01	; 1
  d0:	0e 94 52 00 	call	0xa4	; 0xa4 <data>
	PORTC&=~(1<<4);
	
}
void display(const char *p)
{
	while(*p)
  d4:	88 81       	ld	r24, Y
  d6:	81 11       	cpse	r24, r1
  d8:	fa cf       	rjmp	.-12     	; 0xce <display+0x8>
	{
		data(*p++);
	}
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <dispnum>:

void dispnum(signed int i)
{
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	00 d0       	rcall	.+0      	; 0xea <dispnum+0xa>
  ea:	00 d0       	rcall	.+0      	; 0xec <dispnum+0xc>
  ec:	1f 92       	push	r1
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	signed int j=0;
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <dispnum+0x1a>
	char a[5];
	do
	{
		a[j++]=(i%10+48);//526 i=52
  f8:	89 01       	movw	r16, r18
  fa:	98 01       	movw	r18, r16
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	6a e0       	ldi	r22, 0x0A	; 10
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 01 01 	call	0x202	; 0x202 <__divmodhi4>
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e0 0f       	add	r30, r16
 112:	f1 1f       	adc	r31, r17
 114:	80 5d       	subi	r24, 0xD0	; 208
 116:	80 83       	st	Z, r24
		i=i/10;
 118:	86 2f       	mov	r24, r22
 11a:	97 2f       	mov	r25, r23
	}while(i>0);
 11c:	18 16       	cp	r1, r24
 11e:	19 06       	cpc	r1, r25
 120:	5c f3       	brlt	.-42     	; 0xf8 <dispnum+0x18>
 122:	0b c0       	rjmp	.+22     	; 0x13a <dispnum+0x5a>
	for(j--;j>=0;j--)
	{
		data(a[j]);
 124:	e1 e0       	ldi	r30, 0x01	; 1
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ec 0f       	add	r30, r28
 12a:	fd 1f       	adc	r31, r29
 12c:	e0 0f       	add	r30, r16
 12e:	f1 1f       	adc	r31, r17
 130:	80 81       	ld	r24, Z
 132:	0e 94 52 00 	call	0xa4	; 0xa4 <data>
	do
	{
		a[j++]=(i%10+48);//526 i=52
		i=i/10;
	}while(i>0);
	for(j--;j>=0;j--)
 136:	01 50       	subi	r16, 0x01	; 1
 138:	11 09       	sbc	r17, r1
 13a:	11 23       	and	r17, r17
 13c:	9c f7       	brge	.-26     	; 0x124 <dispnum+0x44>
	{
		data(a[j]);
	}
	display("   ");
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 63 00 	call	0xc6	; 0xc6 <display>
	
}
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <main>:

int main(void)
{
	DDRD=~0;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	81 bb       	out	0x11, r24	; 17
	DDRC|=((1<<3)|(1<<4));
 15e:	84 b3       	in	r24, 0x14	; 20
 160:	88 61       	ori	r24, 0x18	; 24
 162:	84 bb       	out	0x14, r24	; 20
	DDRA=0;
 164:	1a ba       	out	0x1a, r1	; 26
	ADCSRA=0xC0;
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	86 b9       	out	0x06, r24	; 6
	cmd(0x0C);
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x38);
 170:	88 e3       	ldi	r24, 0x38	; 56
 172:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x01);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	
	while (1)
	{
		long int adc=0;
		ADMUX=0;
 17c:	17 b8       	out	0x07, r1	; 7
 17e:	8f ec       	ldi	r24, 0xCF	; 207
 180:	97 e0       	ldi	r25, 0x07	; 7
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x28>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x2e>
 188:	00 00       	nop
		_delay_ms(1);
		ADCSRA|=(1<<ADSC);
 18a:	86 b1       	in	r24, 0x06	; 6
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA&(1<<ADIF))==0);
 190:	34 9b       	sbis	0x06, 4	; 6
 192:	fe cf       	rjmp	.-4      	; 0x190 <main+0x36>
		cmd(0x80);
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
		display("Pot-hg = ");
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 63 00 	call	0xc6	; 0xc6 <display>
		dispnum(ADCL|(ADCH<<8));
 1a2:	24 b1       	in	r18, 0x04	; 4
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	98 2f       	mov	r25, r24
 1aa:	88 27       	eor	r24, r24
 1ac:	82 2b       	or	r24, r18
 1ae:	0e 94 70 00 	call	0xe0	; 0xe0 <dispnum>
		ADMUX=1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	87 b9       	out	0x07, r24	; 7
 1b6:	8f ec       	ldi	r24, 0xCF	; 207
 1b8:	97 e0       	ldi	r25, 0x07	; 7
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x60>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x66>
 1c0:	00 00       	nop
		_delay_ms(1);
		ADCSRA|=(1<<ADSC);
 1c2:	86 b1       	in	r24, 0x06	; 6
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA&(1<<ADIF))==0);
 1c8:	34 9b       	sbis	0x06, 4	; 6
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0x6e>
		cmd(0xC0);
 1cc:	80 ec       	ldi	r24, 0xC0	; 192
 1ce:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
		display("Temprature = ");
 1d2:	8e e6       	ldi	r24, 0x6E	; 110
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 63 00 	call	0xc6	; 0xc6 <display>
		adc=ADCL|(ADCH<<8);
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	a5 b1       	in	r26, 0x05	; 5
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	ba 2f       	mov	r27, r26
 1e2:	aa 27       	eor	r26, r26
 1e4:	a8 2b       	or	r26, r24
		adc=(adc*500)/1023;
 1e6:	24 ef       	ldi	r18, 0xF4	; 244
 1e8:	31 e0       	ldi	r19, 0x01	; 1
 1ea:	0e 94 34 01 	call	0x268	; 0x268 <__usmulhisi3>
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	33 e0       	ldi	r19, 0x03	; 3
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	0e 94 15 01 	call	0x22a	; 0x22a <__divmodsi4>
		dispnum(adc);
 1fa:	c9 01       	movw	r24, r18
 1fc:	0e 94 70 00 	call	0xe0	; 0xe0 <dispnum>
	}
 200:	bd cf       	rjmp	.-134    	; 0x17c <main+0x22>

00000202 <__divmodhi4>:
 202:	97 fb       	bst	r25, 7
 204:	07 2e       	mov	r0, r23
 206:	16 f4       	brtc	.+4      	; 0x20c <__divmodhi4+0xa>
 208:	00 94       	com	r0
 20a:	07 d0       	rcall	.+14     	; 0x21a <__divmodhi4_neg1>
 20c:	77 fd       	sbrc	r23, 7
 20e:	09 d0       	rcall	.+18     	; 0x222 <__divmodhi4_neg2>
 210:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodhi4>
 214:	07 fc       	sbrc	r0, 7
 216:	05 d0       	rcall	.+10     	; 0x222 <__divmodhi4_neg2>
 218:	3e f4       	brtc	.+14     	; 0x228 <__divmodhi4_exit>

0000021a <__divmodhi4_neg1>:
 21a:	90 95       	com	r25
 21c:	81 95       	neg	r24
 21e:	9f 4f       	sbci	r25, 0xFF	; 255
 220:	08 95       	ret

00000222 <__divmodhi4_neg2>:
 222:	70 95       	com	r23
 224:	61 95       	neg	r22
 226:	7f 4f       	sbci	r23, 0xFF	; 255

00000228 <__divmodhi4_exit>:
 228:	08 95       	ret

0000022a <__divmodsi4>:
 22a:	05 2e       	mov	r0, r21
 22c:	97 fb       	bst	r25, 7
 22e:	1e f4       	brtc	.+6      	; 0x236 <__divmodsi4+0xc>
 230:	00 94       	com	r0
 232:	0e 94 2c 01 	call	0x258	; 0x258 <__negsi2>
 236:	57 fd       	sbrc	r21, 7
 238:	07 d0       	rcall	.+14     	; 0x248 <__divmodsi4_neg2>
 23a:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodsi4>
 23e:	07 fc       	sbrc	r0, 7
 240:	03 d0       	rcall	.+6      	; 0x248 <__divmodsi4_neg2>
 242:	4e f4       	brtc	.+18     	; 0x256 <__divmodsi4_exit>
 244:	0c 94 2c 01 	jmp	0x258	; 0x258 <__negsi2>

00000248 <__divmodsi4_neg2>:
 248:	50 95       	com	r21
 24a:	40 95       	com	r20
 24c:	30 95       	com	r19
 24e:	21 95       	neg	r18
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	4f 4f       	sbci	r20, 0xFF	; 255
 254:	5f 4f       	sbci	r21, 0xFF	; 255

00000256 <__divmodsi4_exit>:
 256:	08 95       	ret

00000258 <__negsi2>:
 258:	90 95       	com	r25
 25a:	80 95       	com	r24
 25c:	70 95       	com	r23
 25e:	61 95       	neg	r22
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	8f 4f       	sbci	r24, 0xFF	; 255
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	08 95       	ret

00000268 <__usmulhisi3>:
 268:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__umulhisi3>

0000026c <__usmulhisi3_tail>:
 26c:	b7 ff       	sbrs	r27, 7
 26e:	08 95       	ret
 270:	82 1b       	sub	r24, r18
 272:	93 0b       	sbc	r25, r19
 274:	08 95       	ret

00000276 <__udivmodhi4>:
 276:	aa 1b       	sub	r26, r26
 278:	bb 1b       	sub	r27, r27
 27a:	51 e1       	ldi	r21, 0x11	; 17
 27c:	07 c0       	rjmp	.+14     	; 0x28c <__udivmodhi4_ep>

0000027e <__udivmodhi4_loop>:
 27e:	aa 1f       	adc	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	a6 17       	cp	r26, r22
 284:	b7 07       	cpc	r27, r23
 286:	10 f0       	brcs	.+4      	; 0x28c <__udivmodhi4_ep>
 288:	a6 1b       	sub	r26, r22
 28a:	b7 0b       	sbc	r27, r23

0000028c <__udivmodhi4_ep>:
 28c:	88 1f       	adc	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	5a 95       	dec	r21
 292:	a9 f7       	brne	.-22     	; 0x27e <__udivmodhi4_loop>
 294:	80 95       	com	r24
 296:	90 95       	com	r25
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	08 95       	ret

0000029e <__udivmodsi4>:
 29e:	a1 e2       	ldi	r26, 0x21	; 33
 2a0:	1a 2e       	mov	r1, r26
 2a2:	aa 1b       	sub	r26, r26
 2a4:	bb 1b       	sub	r27, r27
 2a6:	fd 01       	movw	r30, r26
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <__udivmodsi4_ep>

000002aa <__udivmodsi4_loop>:
 2aa:	aa 1f       	adc	r26, r26
 2ac:	bb 1f       	adc	r27, r27
 2ae:	ee 1f       	adc	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	a2 17       	cp	r26, r18
 2b4:	b3 07       	cpc	r27, r19
 2b6:	e4 07       	cpc	r30, r20
 2b8:	f5 07       	cpc	r31, r21
 2ba:	20 f0       	brcs	.+8      	; 0x2c4 <__udivmodsi4_ep>
 2bc:	a2 1b       	sub	r26, r18
 2be:	b3 0b       	sbc	r27, r19
 2c0:	e4 0b       	sbc	r30, r20
 2c2:	f5 0b       	sbc	r31, r21

000002c4 <__udivmodsi4_ep>:
 2c4:	66 1f       	adc	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	1a 94       	dec	r1
 2ce:	69 f7       	brne	.-38     	; 0x2aa <__udivmodsi4_loop>
 2d0:	60 95       	com	r22
 2d2:	70 95       	com	r23
 2d4:	80 95       	com	r24
 2d6:	90 95       	com	r25
 2d8:	9b 01       	movw	r18, r22
 2da:	ac 01       	movw	r20, r24
 2dc:	bd 01       	movw	r22, r26
 2de:	cf 01       	movw	r24, r30
 2e0:	08 95       	ret

000002e2 <__umulhisi3>:
 2e2:	a2 9f       	mul	r26, r18
 2e4:	b0 01       	movw	r22, r0
 2e6:	b3 9f       	mul	r27, r19
 2e8:	c0 01       	movw	r24, r0
 2ea:	a3 9f       	mul	r26, r19
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	b2 9f       	mul	r27, r18
 2f6:	70 0d       	add	r23, r0
 2f8:	81 1d       	adc	r24, r1
 2fa:	11 24       	eor	r1, r1
 2fc:	91 1d       	adc	r25, r1
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
